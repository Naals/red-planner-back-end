
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PromodoroRound` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PromodoroRound
 * 
 */
export type PromodoroRoundModel = runtime.Types.Result.DefaultSelection<Prisma.$PromodoroRoundPayload>

export type AggregatePromodoroRound = {
  _count: PromodoroRoundCountAggregateOutputType | null
  _min: PromodoroRoundMinAggregateOutputType | null
  _max: PromodoroRoundMaxAggregateOutputType | null
}

export type PromodoroRoundMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  isCompleted: boolean | null
  promodoroSessionId: string | null
}

export type PromodoroRoundMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  isCompleted: boolean | null
  promodoroSessionId: string | null
}

export type PromodoroRoundCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  isCompleted: number
  promodoroSessionId: number
  _all: number
}


export type PromodoroRoundMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isCompleted?: true
  promodoroSessionId?: true
}

export type PromodoroRoundMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isCompleted?: true
  promodoroSessionId?: true
}

export type PromodoroRoundCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isCompleted?: true
  promodoroSessionId?: true
  _all?: true
}

export type PromodoroRoundAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PromodoroRound to aggregate.
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroRounds to fetch.
   */
  orderBy?: Prisma.PromodoroRoundOrderByWithRelationInput | Prisma.PromodoroRoundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PromodoroRoundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroRounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroRounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PromodoroRounds
  **/
  _count?: true | PromodoroRoundCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PromodoroRoundMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PromodoroRoundMaxAggregateInputType
}

export type GetPromodoroRoundAggregateType<T extends PromodoroRoundAggregateArgs> = {
      [P in keyof T & keyof AggregatePromodoroRound]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePromodoroRound[P]>
    : Prisma.GetScalarType<T[P], AggregatePromodoroRound[P]>
}




export type PromodoroRoundGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PromodoroRoundWhereInput
  orderBy?: Prisma.PromodoroRoundOrderByWithAggregationInput | Prisma.PromodoroRoundOrderByWithAggregationInput[]
  by: Prisma.PromodoroRoundScalarFieldEnum[] | Prisma.PromodoroRoundScalarFieldEnum
  having?: Prisma.PromodoroRoundScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PromodoroRoundCountAggregateInputType | true
  _min?: PromodoroRoundMinAggregateInputType
  _max?: PromodoroRoundMaxAggregateInputType
}

export type PromodoroRoundGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  isCompleted: boolean | null
  promodoroSessionId: string
  _count: PromodoroRoundCountAggregateOutputType | null
  _min: PromodoroRoundMinAggregateOutputType | null
  _max: PromodoroRoundMaxAggregateOutputType | null
}

type GetPromodoroRoundGroupByPayload<T extends PromodoroRoundGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PromodoroRoundGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PromodoroRoundGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PromodoroRoundGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PromodoroRoundGroupByOutputType[P]>
      }
    >
  >



export type PromodoroRoundWhereInput = {
  AND?: Prisma.PromodoroRoundWhereInput | Prisma.PromodoroRoundWhereInput[]
  OR?: Prisma.PromodoroRoundWhereInput[]
  NOT?: Prisma.PromodoroRoundWhereInput | Prisma.PromodoroRoundWhereInput[]
  id?: Prisma.StringFilter<"PromodoroRound"> | string
  createdAt?: Prisma.DateTimeFilter<"PromodoroRound"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromodoroRound"> | Date | string
  isCompleted?: Prisma.BoolNullableFilter<"PromodoroRound"> | boolean | null
  promodoroSessionId?: Prisma.StringFilter<"PromodoroRound"> | string
  promodoroSession?: Prisma.XOR<Prisma.PromodoroSessionScalarRelationFilter, Prisma.PromodoroSessionWhereInput>
}

export type PromodoroRoundOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrderInput | Prisma.SortOrder
  promodoroSessionId?: Prisma.SortOrder
  promodoroSession?: Prisma.PromodoroSessionOrderByWithRelationInput
}

export type PromodoroRoundWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PromodoroRoundWhereInput | Prisma.PromodoroRoundWhereInput[]
  OR?: Prisma.PromodoroRoundWhereInput[]
  NOT?: Prisma.PromodoroRoundWhereInput | Prisma.PromodoroRoundWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"PromodoroRound"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromodoroRound"> | Date | string
  isCompleted?: Prisma.BoolNullableFilter<"PromodoroRound"> | boolean | null
  promodoroSessionId?: Prisma.StringFilter<"PromodoroRound"> | string
  promodoroSession?: Prisma.XOR<Prisma.PromodoroSessionScalarRelationFilter, Prisma.PromodoroSessionWhereInput>
}, "id">

export type PromodoroRoundOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrderInput | Prisma.SortOrder
  promodoroSessionId?: Prisma.SortOrder
  _count?: Prisma.PromodoroRoundCountOrderByAggregateInput
  _max?: Prisma.PromodoroRoundMaxOrderByAggregateInput
  _min?: Prisma.PromodoroRoundMinOrderByAggregateInput
}

export type PromodoroRoundScalarWhereWithAggregatesInput = {
  AND?: Prisma.PromodoroRoundScalarWhereWithAggregatesInput | Prisma.PromodoroRoundScalarWhereWithAggregatesInput[]
  OR?: Prisma.PromodoroRoundScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PromodoroRoundScalarWhereWithAggregatesInput | Prisma.PromodoroRoundScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PromodoroRound"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PromodoroRound"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PromodoroRound"> | Date | string
  isCompleted?: Prisma.BoolNullableWithAggregatesFilter<"PromodoroRound"> | boolean | null
  promodoroSessionId?: Prisma.StringWithAggregatesFilter<"PromodoroRound"> | string
}

export type PromodoroRoundCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  promodoroSession: Prisma.PromodoroSessionCreateNestedOneWithoutPromodoroRoundsInput
}

export type PromodoroRoundUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  promodoroSessionId: string
}

export type PromodoroRoundUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  promodoroSession?: Prisma.PromodoroSessionUpdateOneRequiredWithoutPromodoroRoundsNestedInput
}

export type PromodoroRoundUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  promodoroSessionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PromodoroRoundCreateManyInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  promodoroSessionId: string
}

export type PromodoroRoundUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type PromodoroRoundUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  promodoroSessionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PromodoroRoundListRelationFilter = {
  every?: Prisma.PromodoroRoundWhereInput
  some?: Prisma.PromodoroRoundWhereInput
  none?: Prisma.PromodoroRoundWhereInput
}

export type PromodoroRoundOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PromodoroRoundCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  promodoroSessionId?: Prisma.SortOrder
}

export type PromodoroRoundMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  promodoroSessionId?: Prisma.SortOrder
}

export type PromodoroRoundMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  promodoroSessionId?: Prisma.SortOrder
}

export type PromodoroRoundCreateNestedManyWithoutPromodoroSessionInput = {
  create?: Prisma.XOR<Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput> | Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput[] | Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput[]
  connectOrCreate?: Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput | Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput[]
  createMany?: Prisma.PromodoroRoundCreateManyPromodoroSessionInputEnvelope
  connect?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
}

export type PromodoroRoundUncheckedCreateNestedManyWithoutPromodoroSessionInput = {
  create?: Prisma.XOR<Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput> | Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput[] | Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput[]
  connectOrCreate?: Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput | Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput[]
  createMany?: Prisma.PromodoroRoundCreateManyPromodoroSessionInputEnvelope
  connect?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
}

export type PromodoroRoundUpdateManyWithoutPromodoroSessionNestedInput = {
  create?: Prisma.XOR<Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput> | Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput[] | Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput[]
  connectOrCreate?: Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput | Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput[]
  upsert?: Prisma.PromodoroRoundUpsertWithWhereUniqueWithoutPromodoroSessionInput | Prisma.PromodoroRoundUpsertWithWhereUniqueWithoutPromodoroSessionInput[]
  createMany?: Prisma.PromodoroRoundCreateManyPromodoroSessionInputEnvelope
  set?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  disconnect?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  delete?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  connect?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  update?: Prisma.PromodoroRoundUpdateWithWhereUniqueWithoutPromodoroSessionInput | Prisma.PromodoroRoundUpdateWithWhereUniqueWithoutPromodoroSessionInput[]
  updateMany?: Prisma.PromodoroRoundUpdateManyWithWhereWithoutPromodoroSessionInput | Prisma.PromodoroRoundUpdateManyWithWhereWithoutPromodoroSessionInput[]
  deleteMany?: Prisma.PromodoroRoundScalarWhereInput | Prisma.PromodoroRoundScalarWhereInput[]
}

export type PromodoroRoundUncheckedUpdateManyWithoutPromodoroSessionNestedInput = {
  create?: Prisma.XOR<Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput> | Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput[] | Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput[]
  connectOrCreate?: Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput | Prisma.PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput[]
  upsert?: Prisma.PromodoroRoundUpsertWithWhereUniqueWithoutPromodoroSessionInput | Prisma.PromodoroRoundUpsertWithWhereUniqueWithoutPromodoroSessionInput[]
  createMany?: Prisma.PromodoroRoundCreateManyPromodoroSessionInputEnvelope
  set?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  disconnect?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  delete?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  connect?: Prisma.PromodoroRoundWhereUniqueInput | Prisma.PromodoroRoundWhereUniqueInput[]
  update?: Prisma.PromodoroRoundUpdateWithWhereUniqueWithoutPromodoroSessionInput | Prisma.PromodoroRoundUpdateWithWhereUniqueWithoutPromodoroSessionInput[]
  updateMany?: Prisma.PromodoroRoundUpdateManyWithWhereWithoutPromodoroSessionInput | Prisma.PromodoroRoundUpdateManyWithWhereWithoutPromodoroSessionInput[]
  deleteMany?: Prisma.PromodoroRoundScalarWhereInput | Prisma.PromodoroRoundScalarWhereInput[]
}

export type PromodoroRoundCreateWithoutPromodoroSessionInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
}

export type PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
}

export type PromodoroRoundCreateOrConnectWithoutPromodoroSessionInput = {
  where: Prisma.PromodoroRoundWhereUniqueInput
  create: Prisma.XOR<Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput>
}

export type PromodoroRoundCreateManyPromodoroSessionInputEnvelope = {
  data: Prisma.PromodoroRoundCreateManyPromodoroSessionInput | Prisma.PromodoroRoundCreateManyPromodoroSessionInput[]
  skipDuplicates?: boolean
}

export type PromodoroRoundUpsertWithWhereUniqueWithoutPromodoroSessionInput = {
  where: Prisma.PromodoroRoundWhereUniqueInput
  update: Prisma.XOR<Prisma.PromodoroRoundUpdateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedUpdateWithoutPromodoroSessionInput>
  create: Prisma.XOR<Prisma.PromodoroRoundCreateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedCreateWithoutPromodoroSessionInput>
}

export type PromodoroRoundUpdateWithWhereUniqueWithoutPromodoroSessionInput = {
  where: Prisma.PromodoroRoundWhereUniqueInput
  data: Prisma.XOR<Prisma.PromodoroRoundUpdateWithoutPromodoroSessionInput, Prisma.PromodoroRoundUncheckedUpdateWithoutPromodoroSessionInput>
}

export type PromodoroRoundUpdateManyWithWhereWithoutPromodoroSessionInput = {
  where: Prisma.PromodoroRoundScalarWhereInput
  data: Prisma.XOR<Prisma.PromodoroRoundUpdateManyMutationInput, Prisma.PromodoroRoundUncheckedUpdateManyWithoutPromodoroSessionInput>
}

export type PromodoroRoundScalarWhereInput = {
  AND?: Prisma.PromodoroRoundScalarWhereInput | Prisma.PromodoroRoundScalarWhereInput[]
  OR?: Prisma.PromodoroRoundScalarWhereInput[]
  NOT?: Prisma.PromodoroRoundScalarWhereInput | Prisma.PromodoroRoundScalarWhereInput[]
  id?: Prisma.StringFilter<"PromodoroRound"> | string
  createdAt?: Prisma.DateTimeFilter<"PromodoroRound"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromodoroRound"> | Date | string
  isCompleted?: Prisma.BoolNullableFilter<"PromodoroRound"> | boolean | null
  promodoroSessionId?: Prisma.StringFilter<"PromodoroRound"> | string
}

export type PromodoroRoundCreateManyPromodoroSessionInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
}

export type PromodoroRoundUpdateWithoutPromodoroSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type PromodoroRoundUncheckedUpdateWithoutPromodoroSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type PromodoroRoundUncheckedUpdateManyWithoutPromodoroSessionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}



export type PromodoroRoundSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  promodoroSessionId?: boolean
  promodoroSession?: boolean | Prisma.PromodoroSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["promodoroRound"]>

export type PromodoroRoundSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  promodoroSessionId?: boolean
  promodoroSession?: boolean | Prisma.PromodoroSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["promodoroRound"]>

export type PromodoroRoundSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  promodoroSessionId?: boolean
  promodoroSession?: boolean | Prisma.PromodoroSessionDefaultArgs<ExtArgs>
}, ExtArgs["result"]["promodoroRound"]>

export type PromodoroRoundSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  promodoroSessionId?: boolean
}

export type PromodoroRoundOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "isCompleted" | "promodoroSessionId", ExtArgs["result"]["promodoroRound"]>
export type PromodoroRoundInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  promodoroSession?: boolean | Prisma.PromodoroSessionDefaultArgs<ExtArgs>
}
export type PromodoroRoundIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  promodoroSession?: boolean | Prisma.PromodoroSessionDefaultArgs<ExtArgs>
}
export type PromodoroRoundIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  promodoroSession?: boolean | Prisma.PromodoroSessionDefaultArgs<ExtArgs>
}

export type $PromodoroRoundPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PromodoroRound"
  objects: {
    promodoroSession: Prisma.$PromodoroSessionPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    isCompleted: boolean | null
    promodoroSessionId: string
  }, ExtArgs["result"]["promodoroRound"]>
  composites: {}
}

export type PromodoroRoundGetPayload<S extends boolean | null | undefined | PromodoroRoundDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload, S>

export type PromodoroRoundCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PromodoroRoundFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PromodoroRoundCountAggregateInputType | true
  }

export interface PromodoroRoundDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromodoroRound'], meta: { name: 'PromodoroRound' } }
  /**
   * Find zero or one PromodoroRound that matches the filter.
   * @param {PromodoroRoundFindUniqueArgs} args - Arguments to find a PromodoroRound
   * @example
   * // Get one PromodoroRound
   * const promodoroRound = await prisma.promodoroRound.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PromodoroRoundFindUniqueArgs>(args: Prisma.SelectSubset<T, PromodoroRoundFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PromodoroRound that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PromodoroRoundFindUniqueOrThrowArgs} args - Arguments to find a PromodoroRound
   * @example
   * // Get one PromodoroRound
   * const promodoroRound = await prisma.promodoroRound.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PromodoroRoundFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PromodoroRoundFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PromodoroRound that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundFindFirstArgs} args - Arguments to find a PromodoroRound
   * @example
   * // Get one PromodoroRound
   * const promodoroRound = await prisma.promodoroRound.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PromodoroRoundFindFirstArgs>(args?: Prisma.SelectSubset<T, PromodoroRoundFindFirstArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PromodoroRound that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundFindFirstOrThrowArgs} args - Arguments to find a PromodoroRound
   * @example
   * // Get one PromodoroRound
   * const promodoroRound = await prisma.promodoroRound.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PromodoroRoundFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PromodoroRoundFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PromodoroRounds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PromodoroRounds
   * const promodoroRounds = await prisma.promodoroRound.findMany()
   * 
   * // Get first 10 PromodoroRounds
   * const promodoroRounds = await prisma.promodoroRound.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const promodoroRoundWithIdOnly = await prisma.promodoroRound.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PromodoroRoundFindManyArgs>(args?: Prisma.SelectSubset<T, PromodoroRoundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PromodoroRound.
   * @param {PromodoroRoundCreateArgs} args - Arguments to create a PromodoroRound.
   * @example
   * // Create one PromodoroRound
   * const PromodoroRound = await prisma.promodoroRound.create({
   *   data: {
   *     // ... data to create a PromodoroRound
   *   }
   * })
   * 
   */
  create<T extends PromodoroRoundCreateArgs>(args: Prisma.SelectSubset<T, PromodoroRoundCreateArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PromodoroRounds.
   * @param {PromodoroRoundCreateManyArgs} args - Arguments to create many PromodoroRounds.
   * @example
   * // Create many PromodoroRounds
   * const promodoroRound = await prisma.promodoroRound.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PromodoroRoundCreateManyArgs>(args?: Prisma.SelectSubset<T, PromodoroRoundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PromodoroRounds and returns the data saved in the database.
   * @param {PromodoroRoundCreateManyAndReturnArgs} args - Arguments to create many PromodoroRounds.
   * @example
   * // Create many PromodoroRounds
   * const promodoroRound = await prisma.promodoroRound.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PromodoroRounds and only return the `id`
   * const promodoroRoundWithIdOnly = await prisma.promodoroRound.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PromodoroRoundCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PromodoroRoundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PromodoroRound.
   * @param {PromodoroRoundDeleteArgs} args - Arguments to delete one PromodoroRound.
   * @example
   * // Delete one PromodoroRound
   * const PromodoroRound = await prisma.promodoroRound.delete({
   *   where: {
   *     // ... filter to delete one PromodoroRound
   *   }
   * })
   * 
   */
  delete<T extends PromodoroRoundDeleteArgs>(args: Prisma.SelectSubset<T, PromodoroRoundDeleteArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PromodoroRound.
   * @param {PromodoroRoundUpdateArgs} args - Arguments to update one PromodoroRound.
   * @example
   * // Update one PromodoroRound
   * const promodoroRound = await prisma.promodoroRound.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PromodoroRoundUpdateArgs>(args: Prisma.SelectSubset<T, PromodoroRoundUpdateArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PromodoroRounds.
   * @param {PromodoroRoundDeleteManyArgs} args - Arguments to filter PromodoroRounds to delete.
   * @example
   * // Delete a few PromodoroRounds
   * const { count } = await prisma.promodoroRound.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PromodoroRoundDeleteManyArgs>(args?: Prisma.SelectSubset<T, PromodoroRoundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PromodoroRounds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PromodoroRounds
   * const promodoroRound = await prisma.promodoroRound.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PromodoroRoundUpdateManyArgs>(args: Prisma.SelectSubset<T, PromodoroRoundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PromodoroRounds and returns the data updated in the database.
   * @param {PromodoroRoundUpdateManyAndReturnArgs} args - Arguments to update many PromodoroRounds.
   * @example
   * // Update many PromodoroRounds
   * const promodoroRound = await prisma.promodoroRound.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PromodoroRounds and only return the `id`
   * const promodoroRoundWithIdOnly = await prisma.promodoroRound.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PromodoroRoundUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PromodoroRoundUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PromodoroRound.
   * @param {PromodoroRoundUpsertArgs} args - Arguments to update or create a PromodoroRound.
   * @example
   * // Update or create a PromodoroRound
   * const promodoroRound = await prisma.promodoroRound.upsert({
   *   create: {
   *     // ... data to create a PromodoroRound
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PromodoroRound we want to update
   *   }
   * })
   */
  upsert<T extends PromodoroRoundUpsertArgs>(args: Prisma.SelectSubset<T, PromodoroRoundUpsertArgs<ExtArgs>>): Prisma.Prisma__PromodoroRoundClient<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PromodoroRounds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundCountArgs} args - Arguments to filter PromodoroRounds to count.
   * @example
   * // Count the number of PromodoroRounds
   * const count = await prisma.promodoroRound.count({
   *   where: {
   *     // ... the filter for the PromodoroRounds we want to count
   *   }
   * })
  **/
  count<T extends PromodoroRoundCountArgs>(
    args?: Prisma.Subset<T, PromodoroRoundCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PromodoroRoundCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PromodoroRound.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PromodoroRoundAggregateArgs>(args: Prisma.Subset<T, PromodoroRoundAggregateArgs>): Prisma.PrismaPromise<GetPromodoroRoundAggregateType<T>>

  /**
   * Group by PromodoroRound.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroRoundGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PromodoroRoundGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PromodoroRoundGroupByArgs['orderBy'] }
      : { orderBy?: PromodoroRoundGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PromodoroRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromodoroRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PromodoroRound model
 */
readonly fields: PromodoroRoundFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PromodoroRound.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PromodoroRoundClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  promodoroSession<T extends Prisma.PromodoroSessionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PromodoroSessionDefaultArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PromodoroRound model
 */
export interface PromodoroRoundFieldRefs {
  readonly id: Prisma.FieldRef<"PromodoroRound", 'String'>
  readonly createdAt: Prisma.FieldRef<"PromodoroRound", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PromodoroRound", 'DateTime'>
  readonly isCompleted: Prisma.FieldRef<"PromodoroRound", 'Boolean'>
  readonly promodoroSessionId: Prisma.FieldRef<"PromodoroRound", 'String'>
}
    

// Custom InputTypes
/**
 * PromodoroRound findUnique
 */
export type PromodoroRoundFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroRound to fetch.
   */
  where: Prisma.PromodoroRoundWhereUniqueInput
}

/**
 * PromodoroRound findUniqueOrThrow
 */
export type PromodoroRoundFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroRound to fetch.
   */
  where: Prisma.PromodoroRoundWhereUniqueInput
}

/**
 * PromodoroRound findFirst
 */
export type PromodoroRoundFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroRound to fetch.
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroRounds to fetch.
   */
  orderBy?: Prisma.PromodoroRoundOrderByWithRelationInput | Prisma.PromodoroRoundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PromodoroRounds.
   */
  cursor?: Prisma.PromodoroRoundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroRounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroRounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PromodoroRounds.
   */
  distinct?: Prisma.PromodoroRoundScalarFieldEnum | Prisma.PromodoroRoundScalarFieldEnum[]
}

/**
 * PromodoroRound findFirstOrThrow
 */
export type PromodoroRoundFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroRound to fetch.
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroRounds to fetch.
   */
  orderBy?: Prisma.PromodoroRoundOrderByWithRelationInput | Prisma.PromodoroRoundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PromodoroRounds.
   */
  cursor?: Prisma.PromodoroRoundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroRounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroRounds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PromodoroRounds.
   */
  distinct?: Prisma.PromodoroRoundScalarFieldEnum | Prisma.PromodoroRoundScalarFieldEnum[]
}

/**
 * PromodoroRound findMany
 */
export type PromodoroRoundFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroRounds to fetch.
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroRounds to fetch.
   */
  orderBy?: Prisma.PromodoroRoundOrderByWithRelationInput | Prisma.PromodoroRoundOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PromodoroRounds.
   */
  cursor?: Prisma.PromodoroRoundWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroRounds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroRounds.
   */
  skip?: number
  distinct?: Prisma.PromodoroRoundScalarFieldEnum | Prisma.PromodoroRoundScalarFieldEnum[]
}

/**
 * PromodoroRound create
 */
export type PromodoroRoundCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * The data needed to create a PromodoroRound.
   */
  data: Prisma.XOR<Prisma.PromodoroRoundCreateInput, Prisma.PromodoroRoundUncheckedCreateInput>
}

/**
 * PromodoroRound createMany
 */
export type PromodoroRoundCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PromodoroRounds.
   */
  data: Prisma.PromodoroRoundCreateManyInput | Prisma.PromodoroRoundCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PromodoroRound createManyAndReturn
 */
export type PromodoroRoundCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * The data used to create many PromodoroRounds.
   */
  data: Prisma.PromodoroRoundCreateManyInput | Prisma.PromodoroRoundCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PromodoroRound update
 */
export type PromodoroRoundUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * The data needed to update a PromodoroRound.
   */
  data: Prisma.XOR<Prisma.PromodoroRoundUpdateInput, Prisma.PromodoroRoundUncheckedUpdateInput>
  /**
   * Choose, which PromodoroRound to update.
   */
  where: Prisma.PromodoroRoundWhereUniqueInput
}

/**
 * PromodoroRound updateMany
 */
export type PromodoroRoundUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PromodoroRounds.
   */
  data: Prisma.XOR<Prisma.PromodoroRoundUpdateManyMutationInput, Prisma.PromodoroRoundUncheckedUpdateManyInput>
  /**
   * Filter which PromodoroRounds to update
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * Limit how many PromodoroRounds to update.
   */
  limit?: number
}

/**
 * PromodoroRound updateManyAndReturn
 */
export type PromodoroRoundUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * The data used to update PromodoroRounds.
   */
  data: Prisma.XOR<Prisma.PromodoroRoundUpdateManyMutationInput, Prisma.PromodoroRoundUncheckedUpdateManyInput>
  /**
   * Filter which PromodoroRounds to update
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * Limit how many PromodoroRounds to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PromodoroRound upsert
 */
export type PromodoroRoundUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * The filter to search for the PromodoroRound to update in case it exists.
   */
  where: Prisma.PromodoroRoundWhereUniqueInput
  /**
   * In case the PromodoroRound found by the `where` argument doesn't exist, create a new PromodoroRound with this data.
   */
  create: Prisma.XOR<Prisma.PromodoroRoundCreateInput, Prisma.PromodoroRoundUncheckedCreateInput>
  /**
   * In case the PromodoroRound was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PromodoroRoundUpdateInput, Prisma.PromodoroRoundUncheckedUpdateInput>
}

/**
 * PromodoroRound delete
 */
export type PromodoroRoundDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  /**
   * Filter which PromodoroRound to delete.
   */
  where: Prisma.PromodoroRoundWhereUniqueInput
}

/**
 * PromodoroRound deleteMany
 */
export type PromodoroRoundDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PromodoroRounds to delete
   */
  where?: Prisma.PromodoroRoundWhereInput
  /**
   * Limit how many PromodoroRounds to delete.
   */
  limit?: number
}

/**
 * PromodoroRound without action
 */
export type PromodoroRoundDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
}
