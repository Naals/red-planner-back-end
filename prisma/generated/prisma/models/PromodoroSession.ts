
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PromodoroSession` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PromodoroSession
 * 
 */
export type PromodoroSessionModel = runtime.Types.Result.DefaultSelection<Prisma.$PromodoroSessionPayload>

export type AggregatePromodoroSession = {
  _count: PromodoroSessionCountAggregateOutputType | null
  _min: PromodoroSessionMinAggregateOutputType | null
  _max: PromodoroSessionMaxAggregateOutputType | null
}

export type PromodoroSessionMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  isCompleted: boolean | null
  userId: string | null
}

export type PromodoroSessionMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  isCompleted: boolean | null
  userId: string | null
}

export type PromodoroSessionCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  isCompleted: number
  userId: number
  _all: number
}


export type PromodoroSessionMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isCompleted?: true
  userId?: true
}

export type PromodoroSessionMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isCompleted?: true
  userId?: true
}

export type PromodoroSessionCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  isCompleted?: true
  userId?: true
  _all?: true
}

export type PromodoroSessionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PromodoroSession to aggregate.
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroSessions to fetch.
   */
  orderBy?: Prisma.PromodoroSessionOrderByWithRelationInput | Prisma.PromodoroSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PromodoroSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PromodoroSessions
  **/
  _count?: true | PromodoroSessionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PromodoroSessionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PromodoroSessionMaxAggregateInputType
}

export type GetPromodoroSessionAggregateType<T extends PromodoroSessionAggregateArgs> = {
      [P in keyof T & keyof AggregatePromodoroSession]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePromodoroSession[P]>
    : Prisma.GetScalarType<T[P], AggregatePromodoroSession[P]>
}




export type PromodoroSessionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PromodoroSessionWhereInput
  orderBy?: Prisma.PromodoroSessionOrderByWithAggregationInput | Prisma.PromodoroSessionOrderByWithAggregationInput[]
  by: Prisma.PromodoroSessionScalarFieldEnum[] | Prisma.PromodoroSessionScalarFieldEnum
  having?: Prisma.PromodoroSessionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PromodoroSessionCountAggregateInputType | true
  _min?: PromodoroSessionMinAggregateInputType
  _max?: PromodoroSessionMaxAggregateInputType
}

export type PromodoroSessionGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  isCompleted: boolean | null
  userId: string
  _count: PromodoroSessionCountAggregateOutputType | null
  _min: PromodoroSessionMinAggregateOutputType | null
  _max: PromodoroSessionMaxAggregateOutputType | null
}

type GetPromodoroSessionGroupByPayload<T extends PromodoroSessionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PromodoroSessionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PromodoroSessionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PromodoroSessionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PromodoroSessionGroupByOutputType[P]>
      }
    >
  >



export type PromodoroSessionWhereInput = {
  AND?: Prisma.PromodoroSessionWhereInput | Prisma.PromodoroSessionWhereInput[]
  OR?: Prisma.PromodoroSessionWhereInput[]
  NOT?: Prisma.PromodoroSessionWhereInput | Prisma.PromodoroSessionWhereInput[]
  id?: Prisma.StringFilter<"PromodoroSession"> | string
  createdAt?: Prisma.DateTimeFilter<"PromodoroSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromodoroSession"> | Date | string
  isCompleted?: Prisma.BoolNullableFilter<"PromodoroSession"> | boolean | null
  userId?: Prisma.StringFilter<"PromodoroSession"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  promodoroRounds?: Prisma.PromodoroRoundListRelationFilter
}

export type PromodoroSessionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  promodoroRounds?: Prisma.PromodoroRoundOrderByRelationAggregateInput
}

export type PromodoroSessionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PromodoroSessionWhereInput | Prisma.PromodoroSessionWhereInput[]
  OR?: Prisma.PromodoroSessionWhereInput[]
  NOT?: Prisma.PromodoroSessionWhereInput | Prisma.PromodoroSessionWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"PromodoroSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromodoroSession"> | Date | string
  isCompleted?: Prisma.BoolNullableFilter<"PromodoroSession"> | boolean | null
  userId?: Prisma.StringFilter<"PromodoroSession"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  promodoroRounds?: Prisma.PromodoroRoundListRelationFilter
}, "id">

export type PromodoroSessionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.PromodoroSessionCountOrderByAggregateInput
  _max?: Prisma.PromodoroSessionMaxOrderByAggregateInput
  _min?: Prisma.PromodoroSessionMinOrderByAggregateInput
}

export type PromodoroSessionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PromodoroSessionScalarWhereWithAggregatesInput | Prisma.PromodoroSessionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PromodoroSessionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PromodoroSessionScalarWhereWithAggregatesInput | Prisma.PromodoroSessionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PromodoroSession"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PromodoroSession"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PromodoroSession"> | Date | string
  isCompleted?: Prisma.BoolNullableWithAggregatesFilter<"PromodoroSession"> | boolean | null
  userId?: Prisma.StringWithAggregatesFilter<"PromodoroSession"> | string
}

export type PromodoroSessionCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  user: Prisma.UserCreateNestedOneWithoutPromodoroSessionInput
  promodoroRounds?: Prisma.PromodoroRoundCreateNestedManyWithoutPromodoroSessionInput
}

export type PromodoroSessionUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  userId: string
  promodoroRounds?: Prisma.PromodoroRoundUncheckedCreateNestedManyWithoutPromodoroSessionInput
}

export type PromodoroSessionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  user?: Prisma.UserUpdateOneRequiredWithoutPromodoroSessionNestedInput
  promodoroRounds?: Prisma.PromodoroRoundUpdateManyWithoutPromodoroSessionNestedInput
}

export type PromodoroSessionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  promodoroRounds?: Prisma.PromodoroRoundUncheckedUpdateManyWithoutPromodoroSessionNestedInput
}

export type PromodoroSessionCreateManyInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  userId: string
}

export type PromodoroSessionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type PromodoroSessionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PromodoroSessionListRelationFilter = {
  every?: Prisma.PromodoroSessionWhereInput
  some?: Prisma.PromodoroSessionWhereInput
  none?: Prisma.PromodoroSessionWhereInput
}

export type PromodoroSessionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PromodoroSessionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PromodoroSessionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PromodoroSessionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  isCompleted?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type PromodoroSessionScalarRelationFilter = {
  is?: Prisma.PromodoroSessionWhereInput
  isNot?: Prisma.PromodoroSessionWhereInput
}

export type PromodoroSessionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutUserInput, Prisma.PromodoroSessionUncheckedCreateWithoutUserInput> | Prisma.PromodoroSessionCreateWithoutUserInput[] | Prisma.PromodoroSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PromodoroSessionCreateOrConnectWithoutUserInput | Prisma.PromodoroSessionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PromodoroSessionCreateManyUserInputEnvelope
  connect?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
}

export type PromodoroSessionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutUserInput, Prisma.PromodoroSessionUncheckedCreateWithoutUserInput> | Prisma.PromodoroSessionCreateWithoutUserInput[] | Prisma.PromodoroSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PromodoroSessionCreateOrConnectWithoutUserInput | Prisma.PromodoroSessionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PromodoroSessionCreateManyUserInputEnvelope
  connect?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
}

export type PromodoroSessionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutUserInput, Prisma.PromodoroSessionUncheckedCreateWithoutUserInput> | Prisma.PromodoroSessionCreateWithoutUserInput[] | Prisma.PromodoroSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PromodoroSessionCreateOrConnectWithoutUserInput | Prisma.PromodoroSessionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PromodoroSessionUpsertWithWhereUniqueWithoutUserInput | Prisma.PromodoroSessionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PromodoroSessionCreateManyUserInputEnvelope
  set?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  disconnect?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  delete?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  connect?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  update?: Prisma.PromodoroSessionUpdateWithWhereUniqueWithoutUserInput | Prisma.PromodoroSessionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PromodoroSessionUpdateManyWithWhereWithoutUserInput | Prisma.PromodoroSessionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PromodoroSessionScalarWhereInput | Prisma.PromodoroSessionScalarWhereInput[]
}

export type PromodoroSessionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutUserInput, Prisma.PromodoroSessionUncheckedCreateWithoutUserInput> | Prisma.PromodoroSessionCreateWithoutUserInput[] | Prisma.PromodoroSessionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PromodoroSessionCreateOrConnectWithoutUserInput | Prisma.PromodoroSessionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PromodoroSessionUpsertWithWhereUniqueWithoutUserInput | Prisma.PromodoroSessionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PromodoroSessionCreateManyUserInputEnvelope
  set?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  disconnect?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  delete?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  connect?: Prisma.PromodoroSessionWhereUniqueInput | Prisma.PromodoroSessionWhereUniqueInput[]
  update?: Prisma.PromodoroSessionUpdateWithWhereUniqueWithoutUserInput | Prisma.PromodoroSessionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PromodoroSessionUpdateManyWithWhereWithoutUserInput | Prisma.PromodoroSessionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PromodoroSessionScalarWhereInput | Prisma.PromodoroSessionScalarWhereInput[]
}

export type PromodoroSessionCreateNestedOneWithoutPromodoroRoundsInput = {
  create?: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUncheckedCreateWithoutPromodoroRoundsInput>
  connectOrCreate?: Prisma.PromodoroSessionCreateOrConnectWithoutPromodoroRoundsInput
  connect?: Prisma.PromodoroSessionWhereUniqueInput
}

export type PromodoroSessionUpdateOneRequiredWithoutPromodoroRoundsNestedInput = {
  create?: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUncheckedCreateWithoutPromodoroRoundsInput>
  connectOrCreate?: Prisma.PromodoroSessionCreateOrConnectWithoutPromodoroRoundsInput
  upsert?: Prisma.PromodoroSessionUpsertWithoutPromodoroRoundsInput
  connect?: Prisma.PromodoroSessionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PromodoroSessionUpdateToOneWithWhereWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUpdateWithoutPromodoroRoundsInput>, Prisma.PromodoroSessionUncheckedUpdateWithoutPromodoroRoundsInput>
}

export type PromodoroSessionCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  promodoroRounds?: Prisma.PromodoroRoundCreateNestedManyWithoutPromodoroSessionInput
}

export type PromodoroSessionUncheckedCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  promodoroRounds?: Prisma.PromodoroRoundUncheckedCreateNestedManyWithoutPromodoroSessionInput
}

export type PromodoroSessionCreateOrConnectWithoutUserInput = {
  where: Prisma.PromodoroSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutUserInput, Prisma.PromodoroSessionUncheckedCreateWithoutUserInput>
}

export type PromodoroSessionCreateManyUserInputEnvelope = {
  data: Prisma.PromodoroSessionCreateManyUserInput | Prisma.PromodoroSessionCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PromodoroSessionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PromodoroSessionWhereUniqueInput
  update: Prisma.XOR<Prisma.PromodoroSessionUpdateWithoutUserInput, Prisma.PromodoroSessionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutUserInput, Prisma.PromodoroSessionUncheckedCreateWithoutUserInput>
}

export type PromodoroSessionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PromodoroSessionWhereUniqueInput
  data: Prisma.XOR<Prisma.PromodoroSessionUpdateWithoutUserInput, Prisma.PromodoroSessionUncheckedUpdateWithoutUserInput>
}

export type PromodoroSessionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PromodoroSessionScalarWhereInput
  data: Prisma.XOR<Prisma.PromodoroSessionUpdateManyMutationInput, Prisma.PromodoroSessionUncheckedUpdateManyWithoutUserInput>
}

export type PromodoroSessionScalarWhereInput = {
  AND?: Prisma.PromodoroSessionScalarWhereInput | Prisma.PromodoroSessionScalarWhereInput[]
  OR?: Prisma.PromodoroSessionScalarWhereInput[]
  NOT?: Prisma.PromodoroSessionScalarWhereInput | Prisma.PromodoroSessionScalarWhereInput[]
  id?: Prisma.StringFilter<"PromodoroSession"> | string
  createdAt?: Prisma.DateTimeFilter<"PromodoroSession"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PromodoroSession"> | Date | string
  isCompleted?: Prisma.BoolNullableFilter<"PromodoroSession"> | boolean | null
  userId?: Prisma.StringFilter<"PromodoroSession"> | string
}

export type PromodoroSessionCreateWithoutPromodoroRoundsInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  user: Prisma.UserCreateNestedOneWithoutPromodoroSessionInput
}

export type PromodoroSessionUncheckedCreateWithoutPromodoroRoundsInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
  userId: string
}

export type PromodoroSessionCreateOrConnectWithoutPromodoroRoundsInput = {
  where: Prisma.PromodoroSessionWhereUniqueInput
  create: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUncheckedCreateWithoutPromodoroRoundsInput>
}

export type PromodoroSessionUpsertWithoutPromodoroRoundsInput = {
  update: Prisma.XOR<Prisma.PromodoroSessionUpdateWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUncheckedUpdateWithoutPromodoroRoundsInput>
  create: Prisma.XOR<Prisma.PromodoroSessionCreateWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUncheckedCreateWithoutPromodoroRoundsInput>
  where?: Prisma.PromodoroSessionWhereInput
}

export type PromodoroSessionUpdateToOneWithWhereWithoutPromodoroRoundsInput = {
  where?: Prisma.PromodoroSessionWhereInput
  data: Prisma.XOR<Prisma.PromodoroSessionUpdateWithoutPromodoroRoundsInput, Prisma.PromodoroSessionUncheckedUpdateWithoutPromodoroRoundsInput>
}

export type PromodoroSessionUpdateWithoutPromodoroRoundsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  user?: Prisma.UserUpdateOneRequiredWithoutPromodoroSessionNestedInput
}

export type PromodoroSessionUncheckedUpdateWithoutPromodoroRoundsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PromodoroSessionCreateManyUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  isCompleted?: boolean | null
}

export type PromodoroSessionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  promodoroRounds?: Prisma.PromodoroRoundUpdateManyWithoutPromodoroSessionNestedInput
}

export type PromodoroSessionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  promodoroRounds?: Prisma.PromodoroRoundUncheckedUpdateManyWithoutPromodoroSessionNestedInput
}

export type PromodoroSessionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  isCompleted?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}


/**
 * Count Type PromodoroSessionCountOutputType
 */

export type PromodoroSessionCountOutputType = {
  promodoroRounds: number
}

export type PromodoroSessionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  promodoroRounds?: boolean | PromodoroSessionCountOutputTypeCountPromodoroRoundsArgs
}

/**
 * PromodoroSessionCountOutputType without action
 */
export type PromodoroSessionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSessionCountOutputType
   */
  select?: Prisma.PromodoroSessionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PromodoroSessionCountOutputType without action
 */
export type PromodoroSessionCountOutputTypeCountPromodoroRoundsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PromodoroRoundWhereInput
}


export type PromodoroSessionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  promodoroRounds?: boolean | Prisma.PromodoroSession$promodoroRoundsArgs<ExtArgs>
  _count?: boolean | Prisma.PromodoroSessionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["promodoroSession"]>

export type PromodoroSessionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["promodoroSession"]>

export type PromodoroSessionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["promodoroSession"]>

export type PromodoroSessionSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  isCompleted?: boolean
  userId?: boolean
}

export type PromodoroSessionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "isCompleted" | "userId", ExtArgs["result"]["promodoroSession"]>
export type PromodoroSessionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  promodoroRounds?: boolean | Prisma.PromodoroSession$promodoroRoundsArgs<ExtArgs>
  _count?: boolean | Prisma.PromodoroSessionCountOutputTypeDefaultArgs<ExtArgs>
}
export type PromodoroSessionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type PromodoroSessionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $PromodoroSessionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PromodoroSession"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    promodoroRounds: Prisma.$PromodoroRoundPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    isCompleted: boolean | null
    userId: string
  }, ExtArgs["result"]["promodoroSession"]>
  composites: {}
}

export type PromodoroSessionGetPayload<S extends boolean | null | undefined | PromodoroSessionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload, S>

export type PromodoroSessionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PromodoroSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PromodoroSessionCountAggregateInputType | true
  }

export interface PromodoroSessionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromodoroSession'], meta: { name: 'PromodoroSession' } }
  /**
   * Find zero or one PromodoroSession that matches the filter.
   * @param {PromodoroSessionFindUniqueArgs} args - Arguments to find a PromodoroSession
   * @example
   * // Get one PromodoroSession
   * const promodoroSession = await prisma.promodoroSession.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PromodoroSessionFindUniqueArgs>(args: Prisma.SelectSubset<T, PromodoroSessionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PromodoroSession that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PromodoroSessionFindUniqueOrThrowArgs} args - Arguments to find a PromodoroSession
   * @example
   * // Get one PromodoroSession
   * const promodoroSession = await prisma.promodoroSession.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PromodoroSessionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PromodoroSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PromodoroSession that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionFindFirstArgs} args - Arguments to find a PromodoroSession
   * @example
   * // Get one PromodoroSession
   * const promodoroSession = await prisma.promodoroSession.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PromodoroSessionFindFirstArgs>(args?: Prisma.SelectSubset<T, PromodoroSessionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PromodoroSession that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionFindFirstOrThrowArgs} args - Arguments to find a PromodoroSession
   * @example
   * // Get one PromodoroSession
   * const promodoroSession = await prisma.promodoroSession.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PromodoroSessionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PromodoroSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PromodoroSessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PromodoroSessions
   * const promodoroSessions = await prisma.promodoroSession.findMany()
   * 
   * // Get first 10 PromodoroSessions
   * const promodoroSessions = await prisma.promodoroSession.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const promodoroSessionWithIdOnly = await prisma.promodoroSession.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PromodoroSessionFindManyArgs>(args?: Prisma.SelectSubset<T, PromodoroSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PromodoroSession.
   * @param {PromodoroSessionCreateArgs} args - Arguments to create a PromodoroSession.
   * @example
   * // Create one PromodoroSession
   * const PromodoroSession = await prisma.promodoroSession.create({
   *   data: {
   *     // ... data to create a PromodoroSession
   *   }
   * })
   * 
   */
  create<T extends PromodoroSessionCreateArgs>(args: Prisma.SelectSubset<T, PromodoroSessionCreateArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PromodoroSessions.
   * @param {PromodoroSessionCreateManyArgs} args - Arguments to create many PromodoroSessions.
   * @example
   * // Create many PromodoroSessions
   * const promodoroSession = await prisma.promodoroSession.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PromodoroSessionCreateManyArgs>(args?: Prisma.SelectSubset<T, PromodoroSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PromodoroSessions and returns the data saved in the database.
   * @param {PromodoroSessionCreateManyAndReturnArgs} args - Arguments to create many PromodoroSessions.
   * @example
   * // Create many PromodoroSessions
   * const promodoroSession = await prisma.promodoroSession.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PromodoroSessions and only return the `id`
   * const promodoroSessionWithIdOnly = await prisma.promodoroSession.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PromodoroSessionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PromodoroSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PromodoroSession.
   * @param {PromodoroSessionDeleteArgs} args - Arguments to delete one PromodoroSession.
   * @example
   * // Delete one PromodoroSession
   * const PromodoroSession = await prisma.promodoroSession.delete({
   *   where: {
   *     // ... filter to delete one PromodoroSession
   *   }
   * })
   * 
   */
  delete<T extends PromodoroSessionDeleteArgs>(args: Prisma.SelectSubset<T, PromodoroSessionDeleteArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PromodoroSession.
   * @param {PromodoroSessionUpdateArgs} args - Arguments to update one PromodoroSession.
   * @example
   * // Update one PromodoroSession
   * const promodoroSession = await prisma.promodoroSession.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PromodoroSessionUpdateArgs>(args: Prisma.SelectSubset<T, PromodoroSessionUpdateArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PromodoroSessions.
   * @param {PromodoroSessionDeleteManyArgs} args - Arguments to filter PromodoroSessions to delete.
   * @example
   * // Delete a few PromodoroSessions
   * const { count } = await prisma.promodoroSession.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PromodoroSessionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PromodoroSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PromodoroSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PromodoroSessions
   * const promodoroSession = await prisma.promodoroSession.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PromodoroSessionUpdateManyArgs>(args: Prisma.SelectSubset<T, PromodoroSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PromodoroSessions and returns the data updated in the database.
   * @param {PromodoroSessionUpdateManyAndReturnArgs} args - Arguments to update many PromodoroSessions.
   * @example
   * // Update many PromodoroSessions
   * const promodoroSession = await prisma.promodoroSession.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PromodoroSessions and only return the `id`
   * const promodoroSessionWithIdOnly = await prisma.promodoroSession.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PromodoroSessionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PromodoroSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PromodoroSession.
   * @param {PromodoroSessionUpsertArgs} args - Arguments to update or create a PromodoroSession.
   * @example
   * // Update or create a PromodoroSession
   * const promodoroSession = await prisma.promodoroSession.upsert({
   *   create: {
   *     // ... data to create a PromodoroSession
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PromodoroSession we want to update
   *   }
   * })
   */
  upsert<T extends PromodoroSessionUpsertArgs>(args: Prisma.SelectSubset<T, PromodoroSessionUpsertArgs<ExtArgs>>): Prisma.Prisma__PromodoroSessionClient<runtime.Types.Result.GetResult<Prisma.$PromodoroSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PromodoroSessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionCountArgs} args - Arguments to filter PromodoroSessions to count.
   * @example
   * // Count the number of PromodoroSessions
   * const count = await prisma.promodoroSession.count({
   *   where: {
   *     // ... the filter for the PromodoroSessions we want to count
   *   }
   * })
  **/
  count<T extends PromodoroSessionCountArgs>(
    args?: Prisma.Subset<T, PromodoroSessionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PromodoroSessionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PromodoroSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PromodoroSessionAggregateArgs>(args: Prisma.Subset<T, PromodoroSessionAggregateArgs>): Prisma.PrismaPromise<GetPromodoroSessionAggregateType<T>>

  /**
   * Group by PromodoroSession.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PromodoroSessionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PromodoroSessionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PromodoroSessionGroupByArgs['orderBy'] }
      : { orderBy?: PromodoroSessionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PromodoroSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromodoroSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PromodoroSession model
 */
readonly fields: PromodoroSessionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PromodoroSession.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PromodoroSessionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  promodoroRounds<T extends Prisma.PromodoroSession$promodoroRoundsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PromodoroSession$promodoroRoundsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PromodoroRoundPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PromodoroSession model
 */
export interface PromodoroSessionFieldRefs {
  readonly id: Prisma.FieldRef<"PromodoroSession", 'String'>
  readonly createdAt: Prisma.FieldRef<"PromodoroSession", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PromodoroSession", 'DateTime'>
  readonly isCompleted: Prisma.FieldRef<"PromodoroSession", 'Boolean'>
  readonly userId: Prisma.FieldRef<"PromodoroSession", 'String'>
}
    

// Custom InputTypes
/**
 * PromodoroSession findUnique
 */
export type PromodoroSessionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroSession to fetch.
   */
  where: Prisma.PromodoroSessionWhereUniqueInput
}

/**
 * PromodoroSession findUniqueOrThrow
 */
export type PromodoroSessionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroSession to fetch.
   */
  where: Prisma.PromodoroSessionWhereUniqueInput
}

/**
 * PromodoroSession findFirst
 */
export type PromodoroSessionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroSession to fetch.
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroSessions to fetch.
   */
  orderBy?: Prisma.PromodoroSessionOrderByWithRelationInput | Prisma.PromodoroSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PromodoroSessions.
   */
  cursor?: Prisma.PromodoroSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PromodoroSessions.
   */
  distinct?: Prisma.PromodoroSessionScalarFieldEnum | Prisma.PromodoroSessionScalarFieldEnum[]
}

/**
 * PromodoroSession findFirstOrThrow
 */
export type PromodoroSessionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroSession to fetch.
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroSessions to fetch.
   */
  orderBy?: Prisma.PromodoroSessionOrderByWithRelationInput | Prisma.PromodoroSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PromodoroSessions.
   */
  cursor?: Prisma.PromodoroSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroSessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PromodoroSessions.
   */
  distinct?: Prisma.PromodoroSessionScalarFieldEnum | Prisma.PromodoroSessionScalarFieldEnum[]
}

/**
 * PromodoroSession findMany
 */
export type PromodoroSessionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * Filter, which PromodoroSessions to fetch.
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PromodoroSessions to fetch.
   */
  orderBy?: Prisma.PromodoroSessionOrderByWithRelationInput | Prisma.PromodoroSessionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PromodoroSessions.
   */
  cursor?: Prisma.PromodoroSessionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PromodoroSessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PromodoroSessions.
   */
  skip?: number
  distinct?: Prisma.PromodoroSessionScalarFieldEnum | Prisma.PromodoroSessionScalarFieldEnum[]
}

/**
 * PromodoroSession create
 */
export type PromodoroSessionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * The data needed to create a PromodoroSession.
   */
  data: Prisma.XOR<Prisma.PromodoroSessionCreateInput, Prisma.PromodoroSessionUncheckedCreateInput>
}

/**
 * PromodoroSession createMany
 */
export type PromodoroSessionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PromodoroSessions.
   */
  data: Prisma.PromodoroSessionCreateManyInput | Prisma.PromodoroSessionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PromodoroSession createManyAndReturn
 */
export type PromodoroSessionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * The data used to create many PromodoroSessions.
   */
  data: Prisma.PromodoroSessionCreateManyInput | Prisma.PromodoroSessionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PromodoroSession update
 */
export type PromodoroSessionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * The data needed to update a PromodoroSession.
   */
  data: Prisma.XOR<Prisma.PromodoroSessionUpdateInput, Prisma.PromodoroSessionUncheckedUpdateInput>
  /**
   * Choose, which PromodoroSession to update.
   */
  where: Prisma.PromodoroSessionWhereUniqueInput
}

/**
 * PromodoroSession updateMany
 */
export type PromodoroSessionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PromodoroSessions.
   */
  data: Prisma.XOR<Prisma.PromodoroSessionUpdateManyMutationInput, Prisma.PromodoroSessionUncheckedUpdateManyInput>
  /**
   * Filter which PromodoroSessions to update
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * Limit how many PromodoroSessions to update.
   */
  limit?: number
}

/**
 * PromodoroSession updateManyAndReturn
 */
export type PromodoroSessionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * The data used to update PromodoroSessions.
   */
  data: Prisma.XOR<Prisma.PromodoroSessionUpdateManyMutationInput, Prisma.PromodoroSessionUncheckedUpdateManyInput>
  /**
   * Filter which PromodoroSessions to update
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * Limit how many PromodoroSessions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PromodoroSession upsert
 */
export type PromodoroSessionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * The filter to search for the PromodoroSession to update in case it exists.
   */
  where: Prisma.PromodoroSessionWhereUniqueInput
  /**
   * In case the PromodoroSession found by the `where` argument doesn't exist, create a new PromodoroSession with this data.
   */
  create: Prisma.XOR<Prisma.PromodoroSessionCreateInput, Prisma.PromodoroSessionUncheckedCreateInput>
  /**
   * In case the PromodoroSession was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PromodoroSessionUpdateInput, Prisma.PromodoroSessionUncheckedUpdateInput>
}

/**
 * PromodoroSession delete
 */
export type PromodoroSessionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
  /**
   * Filter which PromodoroSession to delete.
   */
  where: Prisma.PromodoroSessionWhereUniqueInput
}

/**
 * PromodoroSession deleteMany
 */
export type PromodoroSessionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PromodoroSessions to delete
   */
  where?: Prisma.PromodoroSessionWhereInput
  /**
   * Limit how many PromodoroSessions to delete.
   */
  limit?: number
}

/**
 * PromodoroSession.promodoroRounds
 */
export type PromodoroSession$promodoroRoundsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroRound
   */
  select?: Prisma.PromodoroRoundSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroRound
   */
  omit?: Prisma.PromodoroRoundOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroRoundInclude<ExtArgs> | null
  where?: Prisma.PromodoroRoundWhereInput
  orderBy?: Prisma.PromodoroRoundOrderByWithRelationInput | Prisma.PromodoroRoundOrderByWithRelationInput[]
  cursor?: Prisma.PromodoroRoundWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PromodoroRoundScalarFieldEnum | Prisma.PromodoroRoundScalarFieldEnum[]
}

/**
 * PromodoroSession without action
 */
export type PromodoroSessionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PromodoroSession
   */
  select?: Prisma.PromodoroSessionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PromodoroSession
   */
  omit?: Prisma.PromodoroSessionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PromodoroSessionInclude<ExtArgs> | null
}
